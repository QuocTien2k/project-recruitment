import { deleteBlog } from "@api/blog";
import BlogSearch from "@components-search/admin/BlogSearch";
import EmptyState from "@components-states/EmptyState";
import NoResult from "@components-states/NoResult";
import Button from "@components-ui/Button";
import { showCustomConfirm } from "@components-ui/Confirm";
import Loading from "@components-ui/Loading";
import Pagination from "@components-ui/Pagination";
import Title from "@components-ui/Title";
import CreateBlog from "@modals/CreateBlog";
import React, { useEffect, useState } from "react";
import toast from "react-hot-toast";
import { useSelector } from "react-redux";

const List = () => {
  const isGlobalLoading = useSelector((state) => state.loading.global);
  const [modalCreate, setModalCreate] = useState(false);
  const [listBlog, setListBlog] = useState([]);
  const [hasSearched, setHasSearched] = useState(false);
  const [showLoader, setShowLoader] = useState(false);
  const [currentPage, setCurrentPage] = useState(0);
  const itemsPerPage = 1;

  const displayedBlogs = listBlog.slice(
    currentPage * itemsPerPage,
    (currentPage + 1) * itemsPerPage
  );

  useEffect(() => {
    setCurrentPage(0);
  }, [listBlog]);

  const handleDelete = (blogId) => {
    showCustomConfirm({
      title: "X√≥a b√†i blog",
      message: "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a b√†i blog n√†y?",
      onConfirm: async () => {
        try {
          const res = await deleteBlog(blogId);
          if (res.success) {
            toast.success(res.message);
            // Sau khi x√≥a c·∫ßn c·∫≠p nh·∫≠t l·∫°i danh s√°ch
          } else {
            toast.error(res.message || "Kh√¥ng th·ªÉ x√≥a b√†i");
          }
        } catch (err) {
          toast.error(err?.response?.data?.message || "L·ªói khi x√≥a b√†i");
        }
      },
      onCancel: () => {
        console.log("Ng∆∞·ªùi d√πng ƒë√£ h·ªßy x√≥a");
      },
    });
  };

  useEffect(() => {
    let timer;
    if (isGlobalLoading) {
      timer = setTimeout(() => setShowLoader(true), 300); // ch·ªâ hi·ªÉn th·ªã sau 300ms
    } else {
      setShowLoader(false);
    }
    return () => clearTimeout(timer);
  }, [isGlobalLoading]);

  const handleListChange = (action, data) => {
    setListBlog((prev) => {
      switch (action) {
        case "create":
          // Th√™m blog m·ªõi l√™n ƒë·∫ßu danh s√°ch
          return [data, ...prev];

        case "update":
          // C·∫≠p nh·∫≠t blog theo id
          return prev.map((blog) =>
            blog.id === data.id ? { ...blog, ...data } : blog
          );

        case "delete":
          // X√≥a blog theo id
          return prev.filter((blog) => blog.id !== data);

        default:
          return prev;
      }
    });
  };

  return (
    <>
      <div className="flex items-center justify-between gap-3 w-full mb-4">
        <Title text="Danh s√°ch blog" />
        <Button onClick={() => setModalCreate(true)} variant="primary">
          Th√™m b√†i vi·∫øt
        </Button>
      </div>

      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-4 gap-3">
        {/* Search */}
        <div className="flex-1 min-w-0">
          <BlogSearch
            onResults={setListBlog}
            onUserAction={() => setHasSearched(true)}
          />
        </div>
      </div>

      {showLoader ? (
        <Loading size="md" />
      ) : displayedBlogs.length === 0 ? (
        hasSearched ? (
          <NoResult message="Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt n√†o üò¢" />
        ) : (
          <EmptyState message="Hi·ªán t·∫°i ch∆∞a c√≥ b√†i vi·∫øt n√†o ‚úçÔ∏è" />
        )
      ) : (
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
          {/*T·∫°i ƒë√¢y b·∫°n c√≥ th·ªÉ d√πng displayBlogs map() qua t·ª´ng item hi·ªÉ th·ªã. T√¥i mu·ªën hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß
            desc1, desc2 n·∫øu d√†i qu√° th√¨ ta gi·ªõi h·∫°n v√† thay v√†o ƒë√≥ l√† d·∫•u dots , b√™n tr√™n c√≥ 2 n√∫t l√† c·∫≠p nh·∫≠t v√† x√≥a*/}
        </div>
      )}

      <Pagination
        itemsPerPage={itemsPerPage}
        totalItems={listBlog.length}
        currentPage={currentPage}
        onPageChange={setCurrentPage}
      />

      {modalCreate && (
        <CreateBlog
          onClose={() => setModalCreate(false)}
          onChangeList={handleListChange}
        />
      )}
    </>
  );
};

export default List;
