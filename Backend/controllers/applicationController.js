const PostModel = require("../models/Post");
const UserModel = require("../models/User");
const TeacherModel = require("../models/Teacher");
const ApplicationModel = require("../models/Application");
const Notification = require("../models/Notification");

// l·∫•y danh s√°ch ·ª©ng vi√™n apply theo slug cho role user
const getApplicationsByPost = async (req, res) => {
  try {
    const { slug } = req.params;
    const userId = req.user.userId;

    // --- Ki·ªÉm tra tr·∫°ng th√°i ho·∫°t ƒë·ªông ---
    const user = await UserModel.findById(userId).select("isActive");
    if (!user || !user.isActive) {
      return res.status(403).json({
        success: false,
        message: "T√†i kho·∫£n c·ªßa b·∫°n c√≥ v·∫•n ƒë·ªÅ! Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.",
      });
    }

    // t√¨m post theo slug
    const post = await PostModel.findOne({ slug }).populate(
      "createdBy",
      "name middleName email profilePic"
    );

    if (!post) {
      return res
        .status(404)
        .json({ success: false, message: "Kh√¥ng t√¨m th·∫•y b√†i tuy·ªÉn d·ª•ng." });
    }

    // ch·ªâ ch·ªß post m·ªõi ƒë∆∞·ª£c xem danh s√°ch
    if (post.createdBy._id.toString() !== userId.toString()) {
      return res.status(403).json({
        success: false,
        message: "B·∫°n kh√¥ng c√≥ quy·ªÅn xem danh s√°ch n√†y.",
      });
    }

    // l·∫•y applications + populate user c∆° b·∫£n
    const applications = await ApplicationModel.find({ post: post._id })
      .populate(
        "applicant",
        "name middleName email phone profilePic district province"
      )
      .sort({ createdAt: -1 });

    // l·∫•y th√™m d·ªØ li·ªáu teacher (n·∫øu c√≥)
    const userIds = applications.map((app) => app.applicant._id);
    const teachers = await TeacherModel.find({ userId: { $in: userIds } });

    const result = applications.map((app) => {
      const teacher = teachers.find(
        (t) => t.userId.toString() === app.applicant._id.toString()
      );
      return {
        _id: app._id,
        status: app.status,
        createdAt: app.createdAt,
        applicant: {
          user: app.applicant,
          teacher: teacher || null, // tr√°nh undefined
        },
      };
    });
    // format fullName cho createdBy
    const fullName = `${post.createdBy.middleName || ""} ${
      post.createdBy.name || ""
    }`.trim();

    res.status(200).json({
      success: true,
      post: {
        _id: post._id,
        title: post.title,
        slug: post.slug,
        description: post.description,
        district: post.district,
        province: post.province,
        salary: post.salary,
        workingType: post.workingType,
        timeType: post.timeType,
        createdAt: post.createdAt,
        applicationsCount: post.applicationsCount,
        createdBy: {
          ...post.createdBy._doc,
          fullName,
        },
      },
      applications: result,
    });
  } catch (error) {
    res
      .status(500)
      .json({ success: false, message: "L·ªói server: " + error.message });
  }
};

//n·ªôp ƒë∆°n ·ª©ng tuy·ªÉn role teacher
const createApplication = async (req, res) => {
  try {
    const teacherId = req.user.userId; // t·ª´ middleware protect
    const { slug } = req.params;

    // ki·ªÉm tra post c√≥ t·ªìn t·∫°i kh√¥ng
    const post = await PostModel.findOne({ slug });
    if (!post) {
      return res
        .status(404)
        .json({ success: false, message: "Kh√¥ng t√¨m th·∫•y b√†i tuy·ªÉn d·ª•ng." });
    }

    // t·∫°o ƒë∆°n ·ª©ng tuy·ªÉn (nh·ªù unique index n√™n n·∫øu apply tr√πng s·∫Ω b√°o l·ªói)
    const application = await ApplicationModel.create({
      post: post._id,
      applicant: teacherId,
    });

    // tƒÉng t·ªïng s·ªë ·ª©ng tuy·ªÉn
    await PostModel.findByIdAndUpdate(post._id, {
      $inc: { applicationsCount: 1 },
    });

    // üîî g·ª≠i notification cho ch·ªß post
    const notification = await Notification.create({
      user: post.createdBy,
      type: "APPLICATION_PENDING",
      post: post._id,
      message: `C√≥ gi√°o vi√™n ·ª©ng tuy·ªÉn v√†o b√†i tuy·ªÉn d·ª•ng "${post.title}"`,
      link: `/bai-viet-ung-tuyen/${post.slug}`,
    });

    // socket: b·∫Øn noti realtime cho ch·ªß post
    req.app
      .get("io")
      .to(post.createdBy.toString())
      .emit("receive-notification", notification);

    res.status(201).json({
      success: true,
      message: "·ª®ng tuy·ªÉn th√†nh c√¥ng.",
      data: application,
    });
  } catch (error) {
    // handle duplicate key error (E11000) do unique index (post + applicant)
    if (error.code === 11000) {
      return res.status(400).json({
        success: false,
        message: "B·∫°n ƒë√£ ·ª©ng tuy·ªÉn v√†o b√†i n√†y r·ªìi.",
      });
    }
    res
      .status(500)
      .json({ success: false, message: "L·ªói server: " + error.message });
  }
};

//duy·ªát ·ª©ng tuy·ªÉn role user
const approveApplication = async (req, res) => {
  try {
    const { id } = req.params;
    const userId = req.user.userId; // t·ª´ middleware auth

    // --- Ki·ªÉm tra tr·∫°ng th√°i ho·∫°t ƒë·ªông ---
    const user = await UserModel.findById(userId).select("isActive");
    if (!user || !user.isActive) {
      return res.status(403).json({
        success: false,
        message: "T√†i kho·∫£n c·ªßa b·∫°n c√≥ v·∫•n ƒë·ªÅ! Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.",
      });
    }

    const application = await ApplicationModel.findById(id).populate("post");
    if (!application) {
      return res
        .status(404)
        .json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n ·ª©ng tuy·ªÉn." });
    }

    // ch·ªâ ch·ªß b√†i post m·ªõi ƒë∆∞·ª£c duy·ªát
    if (application.post.createdBy.toString() !== userId.toString()) {
      return res
        .status(403)
        .json({ success: false, message: "B·∫°n kh√¥ng c√≥ quy·ªÅn duy·ªát ƒë∆°n n√†y." });
    }

    if (application.status !== "pending") {
      return res
        .status(400)
        .json({ success: false, message: "ƒê∆°n ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥." });
    }

    application.status = "accepted";
    await application.save();

    // tƒÉng count v√†o post (n·∫øu mu·ªën log s·ªë ng∆∞·ªùi ƒë√£ nh·∫≠n)
    await PostModel.findByIdAndUpdate(application.post._id, {
      $inc: { applicationsCount: 1 },
      $addToSet: { hiredTeacher: application.applicant }, //tr√°nh tr√πng l·∫∑p
    });

    // üîî g·ª≠i noti cho teacher
    const notification = await Notification.create({
      user: application.applicant,
      type: "APPLICATION_ACCEPTED",
      post: application.post._id,
      message: `ƒê∆°n ·ª©ng tuy·ªÉn c·ªßa b·∫°n v√†o "${application.post.title}" ƒë√£ ƒë∆∞·ª£c ch·∫•p nh·∫≠n!`,
      link: `/bai-viet/${application.post.slug}`,
    });

    req.app
      .get("io")
      .to(application.applicant.toString())
      .emit("receive-notification", notification);

    res.status(200).json({
      success: true,
      message: "Duy·ªát ƒë∆°n ·ª©ng tuy·ªÉn th√†nh c√¥ng.",
      data: application,
    });
  } catch (error) {
    res
      .status(500)
      .json({ success: false, message: "L·ªói server: " + error.message });
  }
};

//t·ª´ ch·ªëi ·ª©ng tuy·ªÉn role user
const rejectApplication = async (req, res) => {
  try {
    const { id } = req.params;
    const userId = req.user.userId;

    // --- Ki·ªÉm tra tr·∫°ng th√°i ho·∫°t ƒë·ªông ---
    const user = await UserModel.findById(userId).select("isActive");
    if (!user || !user.isActive) {
      return res.status(403).json({
        success: false,
        message: "T√†i kho·∫£n c·ªßa b·∫°n c√≥ v·∫•n ƒë·ªÅ! Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.",
      });
    }

    const application = await ApplicationModel.findById(id).populate("post");
    if (!application) {
      return res
        .status(404)
        .json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n ·ª©ng tuy·ªÉn." });
    }

    if (application.post.createdBy.toString() !== userId.toString()) {
      return res.status(403).json({
        success: false,
        message: "B·∫°n kh√¥ng c√≥ quy·ªÅn t·ª´ ch·ªëi ƒë∆°n n√†y.",
      });
    }

    if (application.status !== "pending") {
      return res
        .status(400)
        .json({ success: false, message: "ƒê∆°n ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥." });
    }

    application.status = "rejected";
    await application.save();

    // üîî g·ª≠i noti cho teacher
    const notification = await Notification.create({
      user: application.applicant,
      type: "APPLICATION_REJECTED",
      post: application.post._id,
      message: `ƒê∆°n ·ª©ng tuy·ªÉn c·ªßa b·∫°n v√†o "${application.post.title}" ƒë√£ b·ªã t·ª´ ch·ªëi.`,
      link: `/bai-viet/${application.post.slug}`,
    });

    req.app
      .get("io")
      .to(application.applicant.toString())
      .emit("receive-notification", notification);

    res.status(200).json({
      success: true,
      message: "T·ª´ ch·ªëi ƒë∆°n ·ª©ng tuy·ªÉn th√†nh c√¥ng.",
      data: application,
    });
  } catch (error) {
    res
      .status(500)
      .json({ success: false, message: "L·ªói server: " + error.message });
  }
};

// ki·ªÉm tra tr·∫°ng th√°i ·ª©ng tuy·ªÉn c·ªßa gi√°o vi√™n cho 1 b√†i post
const checkApplicationStatus = async (req, res) => {
  try {
    const { postId } = req.params;
    const teacherId = req.user.userId; // l·∫•y t·ª´ middleware auth

    // ki·ªÉm tra b√†i post c√≥ t·ªìn t·∫°i kh√¥ng
    const post = await PostModel.findById(postId);
    if (!post) {
      return res
        .status(404)
        .json({ success: false, message: "Kh√¥ng t√¨m th·∫•y b√†i tuy·ªÉn d·ª•ng." });
    }

    // t√¨m ·ª©ng tuy·ªÉn c·ªßa gi√°o vi√™n n√†y
    const application = await ApplicationModel.findOne({
      post: postId,
      applicant: teacherId,
    });

    if (!application) {
      return res.status(200).json({
        success: true,
        applied: false,
        message: "Ch∆∞a ·ª©ng tuy·ªÉn b√†i n√†y.",
      });
    }

    res.status(200).json({
      success: true,
      applied: true,
      status: application.status, // pending | accepted | rejected
      applicationId: application._id,
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "L·ªói server: " + error.message,
    });
  }
};

module.exports = {
  getApplicationsByPost,
  createApplication,
  approveApplication,
  rejectApplication,
  checkApplicationStatus,
};
