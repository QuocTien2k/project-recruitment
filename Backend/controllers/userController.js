const UserModel = require("../models/User");
const FavoriteModel = require("../models/Favorite");
const TeacherModel = require("../models/Teacher");
const SavedPostModel = require("../models/SavedPost.js");
const PostModel = require("../models/Post.js");
const cloudinary = require("../cloudinary");
const bcrypt = require("bcryptjs");

//l·∫•y to√†n b·ªô th√¥ng tin
const getLogged = async (req, res) => {
  try {
    const user = await UserModel.findById(req.user.userId).select("-password");
    if (!user) {
      return res.status(404).json({
        message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng",
        success: false,
      });
    }

    let responseData = {
      _id: user._id,
      name: user.name,
      middleName: user.middleName,
      email: user.email,
      phone: user.phone,
      province: user.province,
      district: user.district,
      role: user.role,
      isActive: user.isActive,
      profilePic: user.profilePic,
      createdAt: user.createdAt,
      updatedAt: user.updatedAt,
    };

    // N·∫øu l√† gi√°o vi√™n ‚Üí l·∫•y th√™m th√¥ng tin t·ª´ b·∫£ng teacher
    if (user.role === "teacher") {
      const teacher = await TeacherModel.findOne({ userId: user._id });
      if (teacher) {
        responseData = {
          ...responseData,
          teacher: {
            workingType: teacher.workingType,
            timeType: teacher.timeType,
            description: teacher.description,
            faculty: teacher.faculty,
            teachingLevel: teacher.teachingLevel,
            experience: teacher.experience,
          },
        };
      }
    }

    res.status(200).json({
      message: "L·∫•y th√¥ng tin user ƒëƒÉng nh·∫≠p th√†nh c√¥ng",
      success: true,
      data: responseData,
    });
  } catch (error) {
    res.status(500).json({
      message: "L·ªói: " + error.message,
      success: false,
    });
  }
};

// l·∫•y th√¥ng tin d·ª±a v√†o id
const getUserById = async (req, res) => {
  try {
    const { id } = req.params;

    const user = await UserModel.findById(id).select("-password -__v");

    if (!user) {
      return res.status(404).json({
        message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng",
        success: false,
      });
    }

    let teacherId = null;
    if (user.role === "teacher") {
      const teacher = await TeacherModel.findOne({ userId: user._id }).select(
        "_id"
      );
      teacherId = teacher?._id || null;
    }

    // üëâ Tr·∫£ v·ªÅ user + teacherId (n·∫øu c√≥)
    res.status(200).json({
      message: "L·∫•y th√¥ng tin ng∆∞·ªùi d√πng th√†nh c√¥ng",
      success: true,
      data: { ...user.toObject(), teacherId },
    });
  } catch (error) {
    res.status(500).json({
      message: "L·ªói server: " + error.message,
      success: false,
    });
  }
};

//update avatar
const updateAvatar = async (req, res) => {
  try {
    const userId = req.user.userId;

    // Ki·ªÉm tra c√≥ ·∫£nh m·ªõi kh√¥ng
    if (!req.image || !req.image.url) {
      return res.status(400).json({
        success: false,
        message: "Kh√¥ng c√≥ ·∫£nh ƒë∆∞·ª£c t·∫£i l√™n",
      });
    }

    // T√¨m user hi·ªán t·∫°i
    const user = await UserModel.findById(userId);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i",
      });
    }

    // N·∫øu c√≥ avatar c≈© ‚Üí xo√° kh·ªèi Cloudinary
    if (user.profilePic && user.profilePic.public_id) {
      await cloudinary.uploader.destroy(user.profilePic.public_id);
    }

    // C·∫≠p nh·∫≠t ·∫£nh m·ªõi
    user.profilePic = {
      url: req.image.url,
      public_id: req.image.public_id,
    };

    await user.save();

    return res.status(200).json({
      success: true,
      message: "C·∫≠p nh·∫≠t ·∫£nh ƒë·∫°i di·ªán th√†nh c√¥ng",
      avatar: {
        user: user.profilePic.url,
        public_id: user.profilePic.public_id,
      },
    });
  } catch (error) {
    return res.status(500).json({
      success: false,
      message: `L·ªói h·ªá th·ªëng: ${error.message}`,
    });
  }
};

// ƒê·ªïi m·∫≠t kh·∫©u
const changePassword = async (req, res) => {
  try {
    const userId = req.user.userId;
    const { oldPassword, newPassword, confirmPassword } = req.body;

    // 1. Ki·ªÉm tra ƒë·ªß tr∆∞·ªùng
    if (!oldPassword || !newPassword || !confirmPassword) {
      return res.status(400).json({
        success: false,
        message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß c√°c tr∆∞·ªùng",
      });
    }

    // 2. Ki·ªÉm tra confirm kh·ªõp
    if (newPassword !== confirmPassword) {
      return res.status(400).json({
        success: false,
        message: "M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp",
      });
    }

    // 3. T√¨m user theo token
    const user = await UserModel.findById(userId);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i",
      });
    }

    // 4. Ki·ªÉm tra m·∫≠t kh·∫©u c≈© c√≥ ƒë√∫ng kh√¥ng
    const isMatch = await bcrypt.compare(oldPassword, user.password);
    if (!isMatch) {
      return res.status(400).json({
        success: false,
        message: "M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng",
      });
    }

    // 5. Hash l·∫°i m·∫≠t kh·∫©u m·ªõi
    const hashedNewPassword = await bcrypt.hash(newPassword, 10);
    user.password = hashedNewPassword;
    await user.save();

    return res.status(200).json({
      success: true,
      message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng",
    });
  } catch (error) {
    return res.status(500).json({
      success: false,
      message: `L·ªói h·ªá th·ªëng: ${error.message}`,
    });
  }
};

//c·∫≠p nh·∫≠t th√¥ng tin
const updateInfo = async (req, res) => {
  try {
    const userId = req.user.userId;
    const {
      phone,
      district,
      province,
      workingType,
      timeType,
      description,
      experience,
      faculty,
      teachingLevel,
    } = req.body;

    // 1. T√¨m user theo ID
    const user = await UserModel.findById(userId);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i",
      });
    }

    // 2. N·∫øu c√≥ ƒë·ªïi phone ‚Üí ki·ªÉm tra tr√πng
    if (phone && phone !== user.phone) {
      const phoneExists = await UserModel.findOne({ phone });
      if (phoneExists) {
        return res.status(400).json({
          success: false,
          message: "S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng",
        });
      }
      user.phone = phone;
    }

    // 3. C·∫≠p nh·∫≠t c√°c tr∆∞·ªùng chung (user & teacher)
    if (district) user.district = district;
    if (province) user.province = province;

    await user.save();

    let teacherData = null;
    // 4. N·∫øu l√† teacher ‚Üí c·∫≠p nh·∫≠t b·∫£ng TeacherModel
    if (user.role === "teacher") {
      const teacher = await TeacherModel.findOne({ userId: user._id });
      if (!teacher) {
        return res.status(404).json({
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y h·ªì s∆° gi√°o vi√™n",
        });
      }

      if (experience) teacher.experience = experience;
      if (workingType) teacher.workingType = workingType;
      if (timeType) teacher.timeType = timeType;
      if (description) teacher.description = description;
      if (faculty) teacher.faculty = faculty;
      if (teachingLevel) teacher.teachingLevel = teachingLevel;

      await teacher.save();
      teacherData = {
        workingType: teacher.workingType,
        timeType: teacher.timeType,
        description: teacher.description,
        experience: teacher.experience,
        faculty: teacher.faculty,
        teachingLevel: teacher.teachingLevel,
      };
    }

    return res.status(200).json({
      success: true,
      message: "C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng",
      data: {
        user: {
          _id: user._id,
          middleName: user.middleName,
          name: user.name,
          email: user.email,
          phone: user.phone,
          district: user.district,
          province: user.province,
          role: user.role,
        },
        ...(teacherData && { teacher: teacherData }),
      },
    });
  } catch (error) {
    return res.status(500).json({
      success: false,
      message: `L·ªói h·ªá th·ªëng: ${error.message}`,
    });
  }
};

/******** C√° nh√¢n - ƒë·ªëi v·ªõi role User ******** */
const getFavoriteTeachers = async (req, res) => {
  try {
    const userId = req.user.userId; // l·∫•y userId t·ª´ token
    const { name, email, province, district } = req.query;

    // 1. L·∫•y t·∫•t c·∫£ favorite c·ªßa user k√®m theo th√¥ng tin User (teacher)
    const favorites = await FavoriteModel.find({ user: userId })
      .populate("teacher", "-password -resetPasswordToken") // populate ƒë·ªÉ l·∫•y th√¥ng tin User
      .lean();

    // 2. L·∫•y danh s√°ch id c·ªßa teacher (User._id)
    const teacherIds = favorites.map((fav) => fav.teacher._id);

    // 3. T√¨m h·ªì s∆° Teacher (TeacherModel) theo danh s√°ch userId
    const teacherProfiles = await TeacherModel.find({
      userId: { $in: teacherIds },
    }).lean();

    // 4. L·ªçc theo c√°c ƒëi·ªÅu ki·ªán (name, email, province, district)
    let result = favorites
      .map((fav) => {
        const u = fav.teacher; // l·∫•y th√¥ng tin t·ª´ UseModel
        const tp = teacherProfiles.find(
          (t) => t.userId.toString() === u._id.toString()
        ); // t√¨m teacher profile

        return {
          _id: u._id, //id b·∫£ng User
          name: u.name,
          middleName: u.middleName,
          email: u.email,
          province: u.province,
          district: u.district,
          isActive: u.isActive,
          profilePic: u.profilePic,
          experience: tp?.experience ?? null,
          subject: tp?.subject ?? [],
          faculty: tp?.faculty ?? null,
          workingType: tp?.workingType ?? null,
          timeType: tp?.timeType ?? null,
          teacherId: tp?._id ?? null, //id b·∫£ng teacher
        };
      })
      // 5. Ch·ªâ l·∫•y nh·ªØng gi√°o vi√™n ƒëang ho·∫°t ƒë·ªông
      .filter((t) => t.isActive);

    // 6. L·ªçc theo query (name, email, province, district)
    result = result.filter((t) => {
      if (name) {
        const regex = new RegExp(name, "i");
        if (!regex.test(t.name) && !regex.test(t.middleName)) return false;
      }
      if (email) {
        const regex = new RegExp(email, "i");
        if (!regex.test(t.email)) return false;
      }
      if (province && t.province !== province) return false;
      if (district && t.district !== district) return false;
      return true;
    });

    // 7. Tr·∫£ k·∫øt qu·∫£
    res.status(200).json({
      success: true,
      message: "L·∫•y danh s√°ch y√™u th√≠ch th√†nh c√¥ng.",
      data: result,
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "L·ªói server: " + error.message,
    });
  }
};

// Th√™m teacher v√†o m·ª•c y√™u th√≠ch
const addFavoriteTeacher = async (req, res) => {
  try {
    const userId = req.user.userId; // l·∫•y user t·ª´ token
    const { teacherId } = req.body;

    if (!teacherId) {
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu teacherId.",
      });
    }

    // ki·ªÉm tra teacher c√≥ t·ªìn t·∫°i kh√¥ng
    const teacher = await UserModel.findOne({
      _id: teacherId,
      role: "teacher",
    });
    if (!teacher) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y gi√°o vi√™n.",
      });
    }

    // t·∫°o b·∫£n ghi favorite (s·∫Ω fail n·∫øu ƒë√£ t·ªìn t·∫°i v√¨ unique index)
    const favorite = await FavoriteModel.create({
      user: userId,
      teacher: teacherId,
    });

    res.status(201).json({
      success: true,
      message: "ƒê√£ th√™m v√†o m·ª•c y√™u th√≠ch.",
      data: favorite,
    });
  } catch (error) {
    // tr∆∞·ªùng h·ª£p duplicate key error (user + teacher ƒë√£ t·ªìn t·∫°i)
    if (error.code === 11000) {
      return res.status(400).json({
        success: false,
        message: "Gi√°o vi√™n n√†y ƒë√£ c√≥ trong danh s√°ch y√™u th√≠ch.",
      });
    }

    res.status(500).json({
      success: false,
      message: "L·ªói server: " + error.message,
    });
  }
};

//x√≥a teacher ·ªü m·ª•c y√™u th√≠ch
const removeFavoriteTeacher = async (req, res) => {
  try {
    const userId = req.user.userId; // l·∫•y user t·ª´ token
    const { teacherId } = req.body;

    if (!teacherId) {
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu teacherId.",
      });
    }

    // x√≥a b·∫£n ghi y√™u th√≠ch
    const favorite = await FavoriteModel.findOneAndDelete({
      user: userId,
      teacher: teacherId,
    });

    if (!favorite) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y trong danh s√°ch y√™u th√≠ch.",
      });
    }

    // l·∫•y l·∫°i danh s√°ch y√™u th√≠ch m·ªõi nh·∫•t
    const favorites = await FavoriteModel.find({ user: userId }).populate(
      "teacher"
    );

    const teacherIds = favorites.map((fav) => fav.teacher._id);

    const teachers = await UserModel.find({
      _id: { $in: teacherIds },
      isActive: true,
      role: "teacher",
    }).select("-password -resetPasswordToken");

    res.status(200).json({
      success: true,
      message: "ƒê√£ x√≥a kh·ªèi danh s√°ch y√™u th√≠ch.",
      data: teachers,
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "L·ªói server: " + error.message,
    });
  }
};

// Check teacher c√≥ trong danh s√°ch y√™u th√≠ch kh√¥ng
const checkFavoriteTeacher = async (req, res) => {
  try {
    const userId = req.user.userId; // l·∫•y t·ª´ token
    const { teacherId } = req.params;

    if (!teacherId) {
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu teacherId.",
      });
    }

    // t√¨m xem c√≥ t·ªìn t·∫°i record favorite kh√¥ng
    const favorite = await FavoriteModel.findOne({
      user: userId,
      teacher: teacherId,
    });

    res.status(200).json({
      success: true,
      isFavorite: !!favorite, //√©p sang boolean
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "L·ªói server: " + error.message,
    });
  }
};

/******** C√° nh√¢n - ƒë·ªëi v·ªõi role Teacher ******** */
const getSavePosts = async (req, res) => {
  try {
    const teacherId = req.user.userId; // l·∫•y teacher t·ª´ token
    const { title, province, district, workingType, timeType } = req.query;

    // 1. L·∫•y danh s√°ch postId m√† teacher ƒë√£ l∆∞u
    const savedPosts = await SavedPostModel.find({ teacher: teacherId }).lean();
    const postIds = savedPosts.map((sp) => sp.post);

    if (!postIds.length) {
      return res.status(200).json({
        success: true,
        message: "Danh s√°ch b√†i vi·∫øt ƒë√£ l∆∞u r·ªóng.",
        data: [],
      });
    }

    // 2. X√¢y d·ª±ng b·ªô l·ªçc
    const filters = { _id: { $in: postIds }, status: "approved" };

    if (title && title.trim() !== "") {
      filters.title = { $regex: title.trim(), $options: "i" };
    }

    if (province && province.trim() !== "") {
      filters.province = province.trim();
    }

    if (district && district.trim() !== "") {
      filters.district = district.trim();
    }

    if (workingType && workingType.trim() !== "") {
      filters.workingType = workingType.trim();
    }

    if (timeType && timeType.trim() !== "") {
      filters.timeType = timeType.trim();
    }

    // 3. Truy v·∫•n PostModel v·ªõi filter
    const posts = await PostModel.find(filters)
      .populate("createdBy", "-password -resetPasswordToken")
      .sort({ createdAt: -1 }); // m·ªõi nh·∫•t tr∆∞·ªõc

    // 4. Tr·∫£ v·ªÅ k·∫øt qu·∫£
    res.status(200).json({
      success: true,
      message: "L·∫•y danh s√°ch b√†i vi·∫øt ƒë√£ l∆∞u th√†nh c√¥ng.",
      data: posts,
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "L·ªói server: " + error.message,
    });
  }
};

const addSavePost = async (req, res) => {
  try {
    const teacherId = req.user.userId; // l·∫•y user t·ª´ token
    const { postId } = req.body;

    if (!postId) {
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu postId.",
      });
    }

    // ki·ªÉm tra user c√≥ ph·∫£i teacher kh√¥ng
    const teacher = await UserModel.findOne({
      _id: teacherId,
      role: "teacher",
    });
    if (!teacher) {
      return res.status(403).json({
        success: false,
        message: "Ch·ªâ gi√°o vi√™n m·ªõi c√≥ quy·ªÅn l∆∞u b√†i vi·∫øt.",
      });
    }

    // ki·ªÉm tra post c√≥ t·ªìn t·∫°i kh√¥ng
    const post = await PostModel.findById(postId);
    if (!post) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt.",
      });
    }

    // t·∫°o b·∫£n ghi save (s·∫Ω fail n·∫øu ƒë√£ t·ªìn t·∫°i v√¨ unique index)
    const savedPost = await SavedPostModel.create({
      teacher: teacherId,
      post: postId,
    });

    res.status(201).json({
      success: true,
      message: "ƒê√£ l∆∞u b√†i vi·∫øt.",
      data: savedPost,
    });
  } catch (error) {
    // tr∆∞·ªùng h·ª£p duplicate key error (teacher + post ƒë√£ t·ªìn t·∫°i)
    if (error.code === 11000) {
      return res.status(400).json({
        success: false,
        message: "B·∫°n ƒë√£ l∆∞u b√†i vi·∫øt n√†y tr∆∞·ªõc ƒë√≥.",
      });
    }

    res.status(500).json({
      success: false,
      message: "L·ªói server: " + error.message,
    });
  }
};

// X√≥a post kh·ªèi m·ª•c ƒë√£ l∆∞u (ch·ªâ teacher m·ªõi c√≥ quy·ªÅn)
const removeSavePost = async (req, res) => {
  try {
    const teacherId = req.user.userId; // l·∫•y user t·ª´ token
    const { postId } = req.body;

    if (!postId) {
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu postId.",
      });
    }

    // ki·ªÉm tra user c√≥ ph·∫£i teacher kh√¥ng
    const teacher = await UserModel.findOne({
      _id: teacherId,
      role: "teacher",
    });
    if (!teacher) {
      return res.status(403).json({
        success: false,
        message: "Ch·ªâ gi√°o vi√™n m·ªõi c√≥ quy·ªÅn x√≥a b√†i ƒë√£ l∆∞u.",
      });
    }

    // x√≥a b·∫£n ghi l∆∞u
    const saved = await SavedPostModel.findOneAndDelete({
      teacher: teacherId,
      post: postId,
    });

    if (!saved) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y trong danh s√°ch ƒë√£ l∆∞u.",
      });
    }

    // l·∫•y l·∫°i danh s√°ch b√†i vi·∫øt ƒë√£ l∆∞u m·ªõi nh·∫•t
    const savedPosts = await SavedPostModel.find({
      teacher: teacherId,
    }).populate("post");

    // l·ªçc danh s√°ch postId
    const postIds = savedPosts.map((sp) => sp.post._id);

    const posts = await PostModel.find({
      _id: { $in: postIds },
      status: "approved", // ch·ªâ l·∫•y b√†i vi·∫øt c√≤n h·ª£p l·ªá
    }).populate("createdBy", "-password -resetPasswordToken");

    res.status(200).json({
      success: true,
      message: "ƒê√£ x√≥a kh·ªèi danh s√°ch ƒë√£ l∆∞u.",
      data: posts,
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "L·ªói server: " + error.message,
    });
  }
};

const checkSavePost = async (req, res) => {
  try {
    const teacherId = req.user.userId; // l·∫•y t·ª´ token
    const { postId } = req.params;

    if (!postId) {
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu postId.",
      });
    }

    // ki·ªÉm tra user c√≥ ph·∫£i teacher kh√¥ng
    const teacher = await UserModel.findOne({
      _id: teacherId,
      role: "teacher",
    });
    if (!teacher) {
      return res.status(403).json({
        success: false,
        message: "Ch·ªâ gi√°o vi√™n m·ªõi c√≥ quy·ªÅn ki·ªÉm tra l∆∞u b√†i.",
      });
    }

    // t√¨m xem c√≥ t·ªìn t·∫°i record savedPost kh√¥ng
    const saved = await SavedPostModel.findOne({
      teacher: teacherId,
      post: postId,
    });

    res.status(200).json({
      success: true,
      isSaved: !!saved, // √©p sang boolean
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "L·ªói server: " + error.message,
    });
  }
};

module.exports = {
  getLogged,
  getUserById,
  updateAvatar,
  changePassword,
  updateInfo,
  getFavoriteTeachers,
  addFavoriteTeacher,
  removeFavoriteTeacher,
  checkFavoriteTeacher,
  getSavePosts,
  addSavePost,
  removeSavePost,
  checkSavePost,
};
